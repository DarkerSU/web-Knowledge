(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{368:function(t,a,r){"use strict";r.r(a);var s=r(42),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"hello-我是darkersu"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hello-我是darkersu"}},[t._v("#")]),t._v(" Hello! 我是DarkerSu")]),t._v(" "),r("p",[t._v("每一个IT工程师都有着自己的Flag，我的Flag是将技术做到极致。")]),t._v(" "),r("h2",{attrs:{id:"如何做-前端工程化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何做-前端工程化"}},[t._v("#")]),t._v(' 如何做"前端工程化"？')]),t._v(" "),r("p",[t._v("前端工程化就是为了让前端开发能够“自成体系”，个人认为主要应该从"),r("strong",[t._v("模块化")]),t._v("、"),r("strong",[t._v("组件化")]),t._v("、"),r("strong",[t._v("规范化")]),t._v("、"),r("strong",[t._v("自动化")]),t._v("四个方面思考。")]),t._v(" "),r("h4",{attrs:{id:"模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),r("blockquote",[r("p",[t._v("简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。")])]),t._v(" "),r("h5",{attrs:{id:"js的模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js的模块化"}},[t._v("#")]),t._v(" JS的模块化")]),t._v(" "),r("p",[t._v("在ES6之前，JavaScript没有模块系统，这对开发大型复杂的前端工程造成了巨大的障碍。对此社区制定了一些模块加载方案，如CommonJS、AMD和CMD等。")]),t._v(" "),r("p",[t._v("现在ES6已经在语言层面上规定了模块系统，完全可以取代现有的CommonJS和AMD规范，而且使用起来相当简洁，并且有静态加载的特性。")]),t._v(" "),r("ol",[r("li",[t._v("用Webpack + Babel将所有模块打包成一个文件同步加载，也可以搭乘多个chunk异步加载；")]),t._v(" "),r("li",[t._v("用System+Babel主要是分模块异步加载；")]),t._v(" "),r("li",[t._v("用浏览器的"),r("script",{attrs:{type:"module"}})])])])}),[],!1,null,null,null);a.default=e.exports}}]);
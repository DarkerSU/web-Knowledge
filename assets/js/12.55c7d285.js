(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{364:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"你不知道的事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你不知道的事件循环机制"}},[t._v("#")]),t._v(" 你不知道的事件循环机制？")]),t._v(" "),a("p",[t._v("JS事件循环机制分为浏览器循环机制和nodejs事件循环机制。浏览器 Event Loop 是 HTML 中定义的规范。Node Event Loop 是由 libuv 库实现。")]),t._v(" "),a("h3",{attrs:{id:"浏览器事件循环机制-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器事件循环机制-event-loop"}},[t._v("#")]),t._v(" 浏览器事件循环机制（Event Loop）")]),t._v(" "),a("p",[t._v("Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。")]),t._v(" "),a("p",[a("strong",[t._v("主线程")])]),t._v(" "),a("p",[a("strong",[t._v("宏任务")]),t._v("  script  setTimeout setInterval")]),t._v(" "),a("p",[a("strong",[t._v("微任务")]),t._v("  promise")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("执行顺序")]),t._v(" "),a("p",[t._v("1、执行主线程代码，遇到 setTimeout setInterval 该宏任务异步任务重中的回调放置在宏任务队列里面。")]),t._v(" "),a("p",[t._v("2、当遇到了Promise的时候，将该任务.then里面的回调放置在微任务队列里面。")]),t._v(" "),a("p",[t._v("3、主线程执行完成后，先从微任务队列中拿出来执行。")]),t._v(" "),a("p",[t._v("4、微任务执行完成之后，再从宏任务队列中拿出来执行。")]),t._v(" "),a("p",[t._v("5、宏任务里面可能还有其他的setTimeout，Promise这个时候，他们的任务会放在下一次循环任务中执行。")])]),t._v(" "),a("p",[t._v("代码示例：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Promise1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setTimeout2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setTimeout1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Promise2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行结果")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("h3",{attrs:{id:"nodejs事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodejs事件循环机制"}},[t._v("#")]),t._v(" nodejs事件循环机制")]),t._v(" "),a("h4",{attrs:{id:"_1-微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-微任务"}},[t._v("#")]),t._v(" 1.微任务")]),t._v(" "),a("p",[t._v("在谈论Node的事件循环机制之前，先补充说明一下 Node 中的“微任务”。这里说的微任务(microtasks)其实是一个统称，包含了两部分：")]),t._v(" "),a("ul",[a("li",[t._v("process.nextTick() 注册的回调 （nextTick task queue）")]),t._v(" "),a("li",[t._v("promise.then() 注册的回调 （promise task queue）")])]),t._v(" "),a("p",[t._v("Node 在执行微任务时， 会优先执行 nextTick task queue 中的任务，执行完之后会接着执行 promise task queue 中的任务。所以如果 process.nextTick 的回调与 promise.then 的回调都处于主线程或事件循环中的同一阶段， process.nextTick 的回调要优先于 promise.then 的回调执行。")]),t._v(" "),a("h4",{attrs:{id:"_2-事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件循环机制"}},[t._v("#")]),t._v(" 2.事件循环机制")]),t._v(" "),a("p",[a("img",{attrs:{src:"F:%5CgithubRes%5Cweb-Knowledge%5Cdocs.vuepress%5Cpublic%5Cimg%5C898684-20200418064231061-1148380902.png",alt:""}})]),t._v(" "),a("p",[t._v("如图，表示Node执行的整个过程。如果执行了任何非阻塞异步代码（创建计时器、读写文件等），则会进入事件循环。其中事件循环分为六个阶段：")]),t._v(" "),a("p",[t._v("由于Pending callbacks、I/O和Close callbacks 阶段是Node内部使用的三个阶段，所以这里主要分析与开发者代码执行更为直接关联的Timers、Poll 和 Check 三个阶段。")]),t._v(" "),a("p",[a("strong",[t._v("Timers（计时器阶段）")]),t._v("：从图可见，初次进入事件循环，会从计时器阶段开始。此阶段会判断是否存在过期的计时器回调（包含 setTimeout 和 setInterval），如果存在则会执行所有过期的计时器回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Pending callbacks 阶段。")]),t._v(" "),a("p",[a("strong",[t._v("Pending callbacks")]),t._v("：执行推迟到下一个循环迭代的I / O回调（系统调用相关的回调）。")]),t._v(" "),a("p",[a("strong",[t._v("I/O")]),t._v("：仅供内部使用。（详略）")]),t._v(" "),a("p",[a("strong",[t._v("Poll（轮询阶段）")]),t._v("：")]),t._v(" "),a("p",[t._v("当回调队列不为空时：")]),t._v(" "),a("p",[t._v("会执行回调，若回调中触发了相应的微任务，这里的微任务执行时机和其他地方有所不同，不会等到所有回调执行完毕后才执行，而是针对每一个回调执行完毕后，就执行相应微任务。执行完所有的回到后，变为下面的情况。")]),t._v(" "),a("p",[t._v("当回调队列为空时（没有回调或所有回调执行完毕）：")]),t._v(" "),a("p",[t._v("但如果存在有计时器（setTimeout、setInterval和setImmediate）没有执行，会结束轮询阶段，进入 Check 阶段。否则会阻塞并等待任何正在执行的I/O操作完成，并马上执行相应的回调，直到所有回调执行完毕。")]),t._v(" "),a("p",[a("strong",[t._v("Check（查询阶段）")]),t._v("：会检查是否存在 setImmediate 相关的回调，如果存在则执行所有回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Close callbacks 阶段。")]),t._v(" "),a("p",[a("strong",[t._v("Close callbacks")]),t._v("：执行一些关闭回调，比如 "),a("code",[t._v("socket.on('close', ...)")]),t._v("等。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("总结&注意")]),t._v(" "),a("ol",[a("li",[t._v("每一个阶段都会有一个FIFO回调队列，都会尽可能的执行完当前阶段中所有的回调或到达了系统相关限制，才会进入下一个阶段。")]),t._v(" "),a("li",[t._v("Poll 阶段执行的微任务的时机和 Timers 阶段 & Check 阶段的时机不一样，前者是在每一个回调执行就会执行相应微任务，而后者是会在所有回调执行完之后，才统一执行相应微任务。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("**执行过程**")]),t._v(" "),a("p",[t._v("1、执行全局Script的同步代码。")]),t._v(" "),a("p",[t._v("2、执行微任务，先执行所有的Next Tick。")]),t._v(" "),a("p",[t._v("3、主线程执行完成后，先从微任务队列中拿出来执行。")]),t._v(" "),a("p",[t._v("4、微任务执行完成之后，再从宏任务队列中拿出来执行。")]),t._v(" "),a("p",[t._v("5、宏任务里面可能还有其他的setTimeout，Promise这个时候，他们的任务会放在下一次循环任务中执行。")])]),t._v(" "),a("h4",{attrs:{id:"_3-setimmediate、settimeout-setinterval-和-process-nexttick-执行时机对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-setimmediate、settimeout-setinterval-和-process-nexttick-执行时机对比"}},[t._v("#")]),t._v(" 3.setImmediate、setTimeout/setInterval 和 process.nextTick 执行时机对比")]),t._v(" "),a("p",[t._v("setImmediate：触发一个异步回调，在事件循环的 Check 阶段立即执行。")]),t._v(" "),a("p",[t._v("setTimeout：触发一个异步回调，当计时器过期后，在事件循环的 Timers 阶段执行，只执行一次（可用 clearTimeout 取消）。")]),t._v(" "),a("p",[t._v("setInterval：触发一个异步回调，每次计时器过期后，都会在事件循环的 Timers 阶段执行一次回调（可用 clearInterval 取消）。")]),t._v(" "),a("p",[t._v("process.nextTick：触发一个微任务（异步）回调，既可以在主线程（mainline）中执行，可以存在事件循序的某一个阶段中执行。")]),t._v(" "),a("h3",{attrs:{id:"浏览器端和node端不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端和node端不同点"}},[t._v("#")]),t._v(" 浏览器端和node端不同点")]),t._v(" "),a("ol",[a("li",[t._v("Node.js可以理解成4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段；")]),t._v(" "),a("li",[t._v("Node.js，先执行全局Script代码，执行完同步代码调用栈清空后，先从微任务Next Tick Queue中依次取出所有的任务返给调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈执行。然后开始宏任务的6个阶段，每个阶段都将该宏任务队列中的所有任务取出来执行（注意：这里浏览器不一样，浏览器只取一个），每个宏任务阶段执行完毕后，开始执行微任务，再开始执行下一阶段宏任务。以此构成事件循环。")]),t._v(" "),a("li",[t._v("MacroTask包括：setTimeout、setInterval、setImmediate（node）、requestAnimation（浏览器）、IO、UI rendering")]),t._v(" "),a("li",[t._v("MicroTask包括process.nextTick(Node)、Promise.then、Object.observe、MutationObserver")])]),t._v(" "),a("p",[t._v("注意：new Promise() 构造函数里面是同步代码，而非微任务。")])])}),[],!1,null,null,null);s.default=e.exports}}]);